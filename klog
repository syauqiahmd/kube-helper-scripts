#!/bin/bash

# --- Color Definitions ---
C_RESET='\033[0m'
C_RED='\033[0;31m'
C_GREEN='\033[0;32m'
C_YELLOW='\033[0;33m'
C_BOLD='\033[1m'

# Define the function
function klog-search() {
    local namespace pod search_keywords ns_list pod_list selected_ns_index selected_pod_index follow_logs follow_flag log_lines tail_flag

    # Main loop for namespace selection
    while true; do
        # If a namespace is provided as an argument on the first run, use it directly.
        if [ -n "$1" ]; then
            namespace="$1"
            # Unset $1 so we don't get stuck in this branch on subsequent loops
            set --
            # Check if the provided namespace exists
            if ! kubectl get namespace "$namespace" &> /dev/null; then
                echo -e "${C_RED}Error: Namespace '$namespace' not found.${C_RESET}"
                return 1
            fi
        else
            # Otherwise, interactively select a namespace from a numbered list
            echo -e "${C_BOLD}Please select a namespace:${C_RESET}"
            ns_list=($(kubectl get ns -o jsonpath='{.items[*].metadata.name}'))

            if [ ${#ns_list[@]} -eq 0 ]; then
                echo -e "${C_RED}No namespaces found. Exiting.${C_RESET}"
                return 1
            fi

            # Print numbered list
            for i in "${!ns_list[@]}"; do
                echo -e "$((i+1))) ${C_YELLOW}${ns_list[$i]}${C_RESET}"
            done

            read -p "$(echo -e "${C_GREEN}Enter number for namespace (or q to quit): ${C_RESET}")" selected_ns_index

            if [[ "$selected_ns_index" == "q" ]]; then
                echo "Exiting."
                return 0
            fi

            # Validate input
            if ! [[ "$selected_ns_index" =~ ^[0-9]+$ ]] || [ "$selected_ns_index" -lt 1 ] || [ "$selected_ns_index" -gt ${#ns_list[@]} ]; then
                echo -e "${C_RED}Invalid selection. Please try again.${C_RESET}"
                continue # continue namespace selection loop
            fi

            namespace="${ns_list[selected_ns_index-1]}"
        fi

        # Loop for pod selection
        while true; do
            # Interactively select a pod from the chosen namespace
            echo -e "\n${C_BOLD}Please select a pod from the namespace '${namespace}':${C_RESET}"
            pod_list=($(kubectl get pods -n "$namespace" --no-headers | awk '{print $1}'))

            # Check if the list is empty
            if [ ${#pod_list[@]} -eq 0 ]; then
                echo -e "${C_RED}No pods found in namespace '${namespace}'.${C_RESET}"
                break # break pod selection loop, go back to namespace selection
            fi

            # Print numbered list
            for i in "${!pod_list[@]}"; do
                echo -e "$((i+1))) ${C_YELLOW}${pod_list[$i]}${C_RESET}"
            done

            read -p "$(echo -e "${C_GREEN}Enter number for pod (or q to quit, b to go back): ${C_RESET}")" selected_pod_index

            if [[ "$selected_pod_index" == "q" ]]; then
                echo "Exiting."
                return 0
            elif [[ "$selected_pod_index" == "b" ]]; then
                break # break pod selection loop, go back to namespace selection
            fi

            # Validate input
            if ! [[ "$selected_pod_index" =~ ^[0-9]+$ ]] || [ "$selected_pod_index" -lt 1 ] || [ "$selected_pod_index" -gt ${#pod_list[@]} ]; then
                echo -e "${C_RED}Invalid selection. Please try again.${C_RESET}"
                continue # continue pod selection loop
            fi

            pod="${pod_list[selected_pod_index-1]}"

            # Loop for searching in the same pod
            while true; do
                # Prompt for search keywords
                read -p "$(echo -e "\n${C_GREEN}Enter keywords to search (use ';' to separate): ${C_RESET}")" search_keywords

                # Ask user if they want to follow the logs
                read -p "$(echo -e "${C_GREEN}Follow logs? (y/N): ${C_RESET}")" follow_logs
                follow_flag=""
                if [[ "$follow_logs" =~ ^[Yy]$ ]]; then
                    follow_flag="-f"
                fi

                # Prompt for number of log lines
                read -p "$(echo -e "${C_GREEN}Enter number of log lines to fetch (default: 10, use -1 for all): ${C_RESET}")" log_lines
                log_lines=${log_lines:-10} # Default to 10 if empty
                tail_flag=""
                if [ "$log_lines" -ne -1 ]; then
                    tail_flag="--tail=${log_lines}"
                fi

                # If no keywords are entered, show all logs
                if [ -z "$search_keywords" ]; then
                    echo -e "\nDisplaying logs for pod ${C_YELLOW}'$pod'${C_RESET} in namespace ${C_YELLOW}'$namespace'${C_RESET}..."
                    kubectl logs ${follow_flag} ${tail_flag} "$pod" -n "$namespace"
                else
                    # Split keywords and construct the grep command
                    IFS=';' read -ra keywords_array <<< "$search_keywords"
                    grep_pattern=$(printf "%s|" "${keywords_array[@]}" | sed 's/|$//')

                    echo -e "\nSearching logs for pod ${C_YELLOW}'$pod'${C_RESET} in namespace ${C_YELLOW}'$namespace'${C_RESET}..."
                    kubectl logs ${follow_flag} ${tail_flag} "$pod" -n "$namespace" | grep --color=always -E "$grep_pattern"
                fi

                # After logs, ask what to do next
                echo -e "\n${C_BOLD}What do you want to do next?${C_RESET}"
                echo "1) Search again in the same pod ('$pod')"
                echo "2) Select another pod in the same namespace ('$namespace')"
                echo "3) Select another namespace"
                echo "q) Quit"
                read -p "$(echo -e "${C_GREEN}Enter your choice: ${C_RESET}")" next_action

                case "$next_action" in
                    1) continue ;;
                    2) break ;;
                    3) break 2 ;;
                    q) echo "Exiting."; return 0 ;;
                    *) echo -e "${C_RED}Invalid choice. Continuing search in same pod.${C_RESET}";;
                esac
            done
        done
    done
}

klog-search "$@"